name: MLflow CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train-model:
    runs-on: ubuntu-latest

    env:
      MLFLOW_TRACKING_USERNAME: prodivoz
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_URI: https://dagshub.com/prodivoz/Workflow-CI.mlflow

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r MLProject/requirements.txt

      - name: Run MLflow Project
        run: |
          cd MLProject
          mlflow run . --env-manager=local --run-name model_ml_eksperimen --experiment-name "Model ML Eksperimen"

      - name: Get latest MLflow run_id
        run: |
          echo "Getting latest run ID..."
          cat <<EOF > get_run_id.py
          import mlflow
          import os
          
          # Set the tracking URI to connect to your MLflow server
          mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
          experiment_name = "Model ML Eksperimen"
          
          client = mlflow.tracking.MlflowClient()
          
          try:
              # Get the experiment by name
              experiment = client.get_experiment_by_name(experiment_name)
              if experiment is None:
                  print(f"‚ùå Experiment '{experiment_name}' not found.")
                  exit(1)
          
              # Search for the latest run in the experiment
              runs = client.search_runs(
                  experiment_ids=[experiment.experiment_id],
                  order_by=["start_time DESC"],
                  max_results=1
              )
              if not runs:
                  print("‚ùå No MLflow runs found in the experiment.")
                  exit(1)
          
              # Get the run ID and print it
              run_id = runs[0].info.run_id
              print(f"‚úÖ Latest run ID: {run_id}")
          
              # Write the run ID to the GitHub environment file to use in later steps
              with open(os.environ["GITHUB_ENV"], "a") as f:
                  f.write(f"RUN_ID={run_id}\n")
          
          except Exception as e:
              print(f"An error occurred: {e}")
              exit(1)
          EOF
                    python get_run_id.py
          
                - name: Download model artifacts
                  run: |
                    echo "üì• Downloading model artifact from run: ${{ env.RUN_ID }}"
                    cat <<EOF > download_artifact.py
          import mlflow
          import os
          import shutil
          
          # Ensure RUN_ID is available
          run_id = os.environ.get("RUN_ID")
          if not run_id:
              print("‚ùå RUN_ID environment variable not set. Cannot download artifacts.")
              exit(1)
          
          mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
          client = mlflow.tracking.MlflowClient()
          
          try:
              # Define local path for download and destination for copying
              local_download_path = "./temp_artifacts"
              final_dest_path = "./MLProject/model_artifacts/mlflow-artifacts"
          
              print(f"Downloading 'model' artifact from run {run_id} to {local_download_path}...")
              
              # Download the artifact
              client.download_artifacts(run_id=run_id, path="model", dst_path=local_download_path)
          
              print(f"Artifacts downloaded. Now copying to {final_dest_path}")
          
              # Ensure the final destination directory exists and is clean
              if os.path.exists(final_dest_path):
                  shutil.rmtree(final_dest_path)
              
              # The downloaded artifact is inside a 'model' subfolder within local_download_path
              source_path = os.path.join(local_download_path, "model")
              
              shutil.copytree(source_path, final_dest_path)
              
              print(f"‚úÖ Artifacts successfully copied to {final_dest_path}")
          
          except Exception as e:
              print(f"An error occurred during artifact download: {e}")
              exit(1)
          EOF
                    python download_artifact.py

      - name: Upload to GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifact
          path: ./MLProject/model_artifacts/mlflow-artifacts

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="zikri15/prodivoz_model-mlflow"
          echo "üê≥ Building Docker image for the model"
          mlflow models build-docker \
            --model-uri "./MLProject/model_artifacts/mlflow-artifacts" \
            --name "$IMAGE_NAME"

          echo "üì§ Pushing Docker image to Docker Hub"
          docker push "$IMAGE_NAME:latest"
