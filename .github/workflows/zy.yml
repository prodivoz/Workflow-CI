name: MLflow CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    env:
      MLFLOW_TRACKING_USERNAME: prodivoz
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_URI: https://dagshub.com/prodivoz/Workflow-CI.mlflow
      DOCKER_IMAGE_NAME: zikri15/prodivoz_model-mlflow
      PYTHON_VERSION: '3.12'
      WORKING_DIRECTORY: ./MLProject

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.WORKING_DIRECTORY }}/requirements.txt
        pip install dvc[s3]

    - name: Run MLflow Project to train model
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        mlflow run . --env-manager=local --run-name "Training from CI" --experiment-name "Model ML Eksperimen"

    - name: Get latest MLflow run_id
      run: |
        echo "Getting latest run ID..."
        python <<EOF
        import mlflow
        import os
        import sys

        mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
        experiment_name = "Model ML Eksperimen"
        client = mlflow.tracking.MlflowClient()

        try:
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment is None:
                print(f"‚ùå Experiment '{experiment_name}' not found.")
                sys.exit(1)

            runs = client.search_runs(
                experiment_ids=[experiment.experiment_id],
                order_by=["start_time DESC"],
                max_results=1
            )
            if not runs:
                print("‚ùå No MLflow runs found in the experiment.")
                sys.exit(1)

            run_id = runs[0].info.run_id
            print(f"‚úÖ Latest run ID: {run_id}")

            with open(os.environ["GITHUB_ENV"], "a") as f:
                f.write(f"RUN_ID={run_id}\n")

        except Exception as e:
            print(f"An error occurred: {e}")
            sys.exit(1)
        EOF

     - name: Download model artifacts
 
  env:
    MLFLOW_TRACKING_URI: https://dagshub.com/prodivoz/Workflow-CI.mlflow
    MLFLOW_TRACKING_USERNAME: <prodivoz>
    MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }} 
  run: |
    echo "üì• Downloading model artifact for run: ${{ env.RUN_ID }}" 
    
    
    pip install dagshub
    
    # Perintah download artefak Anda
    mlflow artifacts download \
      --run-id ${{ env.RUN_ID }} \
      --artifact-path model \
      -d ./downloaded_artifacts
      
    echo "‚úÖ Artifacts downloaded successfully."
    
    # Pindahkan file ke lokasi yang diinginkan
    mkdir -p model
    mv ./downloaded_artifacts/model/* ./model/

    - name: Upload model to GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: sklearn-model-artifact
        path: ${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        MODEL_URI="${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model"
        echo "üê≥ Building Docker image from URI: $MODEL_URI"

        mlflow models build-docker \
          --model-uri "$MODEL_URI" \
          --name "${{ env.DOCKER_IMAGE_NAME }}"

        echo "üì§ Pushing Docker image to Docker Hub: ${{ env.DOCKER_IMAGE_NAME }}:latest"
        docker push "${{ env.DOCKER_IMAGE_NAME }}:latest"
