name: MLflow CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      # Define variables for easy management
      MLFLOW_TRACKING_USERNAME: prodivoz
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_URI: https://dagshub.com/prodivoz/Workflow-CI.mlflow
      DOCKER_IMAGE_NAME: zikri15/prodivoz_model-mlflow
      PYTHON_VERSION: '3.12'
      WORKING_DIRECTORY: ./MLProject

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.WORKING_DIRECTORY }}/requirements.txt
        pip install dvc[s3]

    - name: Run MLflow Project to train model
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        mlflow run . --env-manager=local --run-name "Training from CI" --experiment-name "Model ML Eksperimen"

    - name: Get latest MLflow run_id
      run: |
        echo "Getting latest run ID..."
        python <<EOF
        import mlflow
        import os
        import sys
        
        mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
        experiment_name = "Model ML Eksperimen"
        client = mlflow.tracking.MlflowClient()
        
        try:
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment is None:
                print(f"❌ Experiment '{experiment_name}' not found.")
                sys.exit(1)
        
            runs = client.search_runs(
                experiment_ids=[experiment.experiment_id],
                order_by=["start_time DESC"],
                max_results=1
            )
            if not runs:
                print("❌ No MLflow runs found in the experiment.")
                sys.exit(1)
        
            run_id = runs[0].info.run_id
            print(f"✅ Latest run ID: {run_id}")
        
            with open(os.environ["GITHUB_ENV"], "a") as f:
                f.write(f"RUN_ID={run_id}\n")
        
        except Exception as e:
            print(f"An error occurred: {e}")
            sys.exit(1)
        EOF

    - name: Download model artifacts via Python Script
      run: |
        echo "📥 Downloading model artifact from run: ${{ env.RUN_ID }}"
        python <<EOF
        import mlflow
        import os
        import sys
        import shutil
        
        run_id = os.environ.get("RUN_ID")
        if not run_id:
            print("❌ RUN_ID not set.")
            sys.exit(1)
        
        # This is the destination directory for the downloaded model
        artifact_destination = os.path.join("${{ env.WORKING_DIRECTORY }}", "model_artifacts", "sklearn_model")
        
        # Ensure the destination directory is clean before download
        if os.path.exists(artifact_destination):
            shutil.rmtree(artifact_destination)
        os.makedirs(artifact_destination, exist_ok=True)
        
        try:
            # Use the programmatic API which is more direct
            mlflow.artifacts.download_artifacts(
                run_id=run_id,
                artifact_path="model",  # The name of the artifact logged in the training script
                dst_path=artifact_destination
            )
            print(f"✅ Artifacts downloaded successfully to {artifact_destination}")
        
        except Exception as e:
            print(f"An error occurred during artifact download: {e}")
            sys.exit(1)
        EOF

    - name: Upload model to GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: sklearn-model-artifact
        path: ${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        # The MODEL_URI now points directly to the directory containing the MLmodel file
        MODEL_URI="${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model"
        
        echo "🐳 Building Docker image from URI: $MODEL_URI"
        
        mlflow models build-docker \
          --model-uri "$MODEL_URI" \
          --name "${{ env.DOCKER_IMAGE_NAME }}"
          
        echo "📤 Pushing Docker image to Docker Hub: ${{ env.DOCKER_IMAGE_NAME }}:latest"
        docker push "${{ env.DOCKER_IMAGE_NAME }}:latest"
