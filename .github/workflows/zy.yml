name: MLflow CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    env:
      MLFLOW_TRACKING_USERNAME: prodivoz
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_URI: https://dagshub.com/prodivoz/Workflow-CI.mlflow
      DOCKER_IMAGE_NAME: zikri15/prodivoz_model-mlflow
      PYTHON_VERSION: '3.12'
      WORKING_DIRECTORY: ./MLProject

    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ env.WORKING_DIRECTORY }}/requirements.txt
        pip install dvc[s3]

    - name: üß† Run MLflow Project to train model
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        mlflow run . --env-manager=local --run-name "Training from CI" --experiment-name "Model ML Eksperimen"

    - name: üè∑Ô∏è Get latest MLflow run_id
      id: get_run_id
      run: |
        echo "üîç Getting latest run ID..."
        python <<EOF
        import mlflow
        import os
        import sys

        mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
        experiment_name = "Model ML Eksperimen"
        client = mlflow.tracking.MlflowClient()

        experiment = client.get_experiment_by_name(experiment_name)
        if experiment is None:
            print("‚ùå Experiment not found.")
            sys.exit(1)

        runs = client.search_runs(
            experiment_ids=[experiment.experiment_id],
            order_by=["start_time DESC"],
            max_results=1
        )
        if not runs:
            print("‚ùå No runs found.")
            sys.exit(1)

        run_id = runs[0].info.run_id
        with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"RUN_ID={run_id}\n")
        print(f"‚úÖ RUN_ID: {run_id}")
        EOF

    - name: üì• Download model artifact from DagsHub safely
      run: |
        echo "üì• Start safe download from DagsHub"
        RUN_ID=${{ env.RUN_ID }}
        ARTIFACT_NAME="model"
        DEST_DIR="${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model"

        mkdir -p "$DEST_DIR"
        echo "üïí Waiting for DagsHub to publish artifact..."

        for i in {1..10}; do
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://dagshub.com/${{ env.MLFLOW_TRACKING_USERNAME }}/Workflow-CI.mlflow/artifacts/$ARTIFACT_NAME?run_id=$RUN_ID")

          if [ "$STATUS_CODE" = "200" ]; then
            echo "‚úÖ Artifact is ready! Starting download..."
            wget -r -np -nH --cut-dirs=5 \
              --reject "index.html*" \
              "https://dagshub.com/${{ env.MLFLOW_TRACKING_USERNAME }}/Workflow-CI.mlflow/artifacts/$ARTIFACT_NAME?run_id=$RUN_ID" \
              -P "$DEST_DIR"
            exit 0
          else
            echo "‚è≥ Not ready yet (HTTP $STATUS_CODE). Retrying in 10s..."
            sleep 10
          fi
        done

        echo "‚ùå Artifact download failed after retries."
        exit 1

    - name: üì¶ Upload model to GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: sklearn-model-artifact
        path: ${{ env.WORKING_DIRECTORY }}/model_artifacts/sklearn_model

    - name: üîê Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: üê≥ Build and Push Docker Image
      run: |
        MODEL_URI="runs:/${{ env.RUN_ID }}/model"
        echo "üê≥ Building Docker image from URI: $MODEL_URI"
        mlflow models build-docker \
          --model-uri "$MODEL_URI" \
          --name "${{ env.DOCKER_IMAGE_NAME }}"
        docker push "${{ env.DOCKER_IMAGE_NAME }}:latest"
